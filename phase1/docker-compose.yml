version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: erpset_postgres
    environment:
      POSTGRES_DB: erpset_dev
      POSTGRES_USER: erpset_user
      POSTGRES_PASSWORD: erpset_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - erpset_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erpset_user -d erpset_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: erpset_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - erpset_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: erpset_backend
    environment:
      - DATABASE_URL=postgresql://erpset_user:erpset_password@postgres:5432/erpset_dev
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    networks:
      - erpset_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: ./backend/requirements.txt
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"
            - .pytest_cache/

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: erpset_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_ENV=development
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - erpset_network
    depends_on:
      - backend
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: ./frontend/package.json
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
            - .next/
            - out/

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: erpset_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@erpset.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - erpset_network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: erpset_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - erpset_network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  erpset_network:
    driver: bridge
    name: erpset_network